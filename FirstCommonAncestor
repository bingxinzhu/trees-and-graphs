/*
design an algorithm and write code to find the first common ancestor of two nodes in a binary 
tree, avoid storing additional nodes in a data structure. NOTE: this is necessory a binary search tree.
*/
// solution 1: with links to parents:
// each node has a link to its parent, we could trace p and q's paths up until they intersect.
TreeNode commonAncestor(TreeNode p, TreeNode q) {
	int delta = depth(p) - depth(q); // get difference in depths
	TreeNode first = delta > 0 ? q : p; // get shallower node
	TreeNode second = delta < 0 ? p : q; // get deeper node
	second = goUpBy(second, Math.abs(delta)); // move deeper node up 

	while(first != second && first != null && second != null) {
		first = first.parent;
		second = second.parent;
	}
	return first == null || second == null ? null : first;
}

TreeNode goUpBy(TreeNode node, int delta) {
	while(delta > 0 && node != null) {
		node = node.parent;
		delta--;
	}
	return node;
}
int depth(TreeNode node) {
	int depth = 0;
	while(node != null) {
		node = node.parent;
		depth++;
	}
	return depth;
}
/*
Similarily, we could trace p's path upwards and check if any of the nodes cover q.
The first node that covers q must be the common ancestor.
*/
TreeNode commonAncestor(TreeNode root, TreeNode p, TreeNode q) {
	if(!covers(root.p) || !covers(root.q)) {
		return null;
	} else if(covers(p,q)) {
		return p;
	} else if(covers(p,q)) {
		return q;
	}
	TreeNode sibling = getSibling(p);
	TreeNode parent = p.parent;
	while(!cover(sibling,q)) {
		sibling = getSibling(parent);
		parent = parent.parent;
	}
	return parent;
}

boolean covers(TreeNode root, TreeNode p) {
	if(node == null) return false;
	if(root == p) return true;
	return covers(root.left, p) || covers(root.right, p);
}

TreeNode getSibling(TreeNode node) {
	if(node == null || node.parent == null) {
		return null;
	}
	TreeNode parent = node.parent;
	return parent.left == node ? parent.right : parent.left;
}
/*
if there is no link to parents, you could follow a chain in which p and q are on the same side.
That is, if p and q are both on the left of the node, branch left to look for the common ancestor. 
If they are both on the right, branch right to look for the common ancestor. When p and q are no longer
on the same side, you must have found the first common ancestor.
*/
TreeNode commonAncestor(TreeNode root, TreeNode p, TreeNode q) {
	if(!cover(root,p) || !cover(root,q))
		return null;
	return ancestorHelper(root, p, q);
}
TreeNode ancestorHelper(TreeNode root, TreeNode p, TreeNode q) {
	if(root == null || root == p || root == q) {
		return root;
	}

	boolean pIsOnLeft = covers(root.left, p);
	boolean qIsOnLeft = covers(root.left, q);
	if(pIsOnLeft != qIsOnLeft)
		return root;
	TreeNode childside = pIsOnLeft ? root.left : root.right;
	return ancestorHelper(childside, p, q);
}
boolean covers(TreeNode root, TreeNode p) {
	if(root == null) return false;
	if(root == p) return true;
	return covers(root.left, p) || covers(root.right, p);
}
/*
optimized:
Find that we should only need to search the entire tree once to find p and q. We should then be able to bubble up
the findings to earlier nodes in the stack.
We recurse through the entire tree witha function called commonAncestor(TreeNode root, TreeNode p, TreeNode q)
Returns p, if root's subtree includes p(not q)
returns q, if root's subtree includes q(not p)
return null if either p nor q are in root's subtree
else return the common ancestor of p and q
But we should be distiguish two cases:
case 1: p is a child of q(or q is a child of p)
case 2: o is in te tree and q is not.
*/
class Result{
	public TreeNode node;
	public boolean isAncestor;
	public Result(TreeNode n, boolean isAnc) {
		node = n;
		isAncestor = isAnc;
	}
}
TreeNode commonAncestor(TreeNode root, TreeNode p, TreeNode q) {
	Result r = commonAncestorHelper(root, p, q);
	if(r.isAncestor){
		return r.node;
	}
	retur null;
}
Result commonAncestorHelper(TreeNode root, TreeNode p, TreeNode q) {
	if(root == null) return new Result(null, false);
	if(root == p && root == q) {
		return new Result(root, true);
	} 
	Result rx = commonAncestorHelper(root.left, p, q);
	if(rx.isAncestor) return rx;
	Result ry = commonAncestorHelper(root.right, p, q);
	if(ry.isAncestor) return ry;
	if(rx.node != null && ry.node != null) {
		return new Result(root, true);
	} else if(root == p || root == q) {
		boolean isAncestor = rx.node != null || ry.node != null;
		return new Result(root, isAncestor);

	} else {
		return new Result(rx.node != null ? rx.node : ry.node, false);

	}
}


























