/*
write an algorithm to find the "next" node of a given node in a binary search tree.
You may assume that each node has a link to its parent.
We know that the order goes left subtree, the current side, then the right subtree.
But which node on the right subtree? -> it should be the first node we visit if we were doing 
an in-order traversal of that subtree. This means that it should be the lefmost node on the right subtree(case 1)
But what if the node doesn't have a right subtree?:
If n was to the left of q(n's parent), then the next node we should traverse should be q,(case2)
if n was to the right of q, then we're done with traversing q's subtree. 
we need to traverse upwards from q until we find a nodex that we have not fully traversed/(case3):
How do we knowthat we have not fully traversed a node x? 
We know we have hit this case when we move from a left node to its parent. The left node is fully traversed, but its parent is not.

Node inorderSucc(Node n) {
	if(n has a right subtree){
	return leftmost child of right subtree
	}else {
	while(n is a right child of n.parent) {
	n = n.parent;
	}
	}
	return n.parent
}
if there is no in-order successor, we should return null.
*/
TreeNode inorderSucc(TreeNode n) {
	if(n == null) return null;
	if(n.right != null) {
		return leftMostChild(n.right);
	} else {
		TreeNode q = n;
		TreeNode x = q.parent;
		// go up untill we're on left in stead of right
		while(x != null && x.left != q) {
			q = x;
			x = x.parent;
		}
		return x;
	}
}
	TreeNode leftMostChild(TreeNode n) {
		if(n == null) {
			return null;
		}
		while (n.left != null) {
			n = n.left;
		}
		return n;
	}



