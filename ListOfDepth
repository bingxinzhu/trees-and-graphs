/*
Given a binary tree, design an algorithm which creates a linked list of all the nodes at each depth.
*/
/*
It seems that this problem requires a level-by-level traversal, this isn't actually necessary, we can traverse the graph any way that we'd like, provided we know which level we're on as we do so.
we can implement a simple modification of the pre-order traversal algorithm, where we 
pass level + 1 to the next recursive call.The code below using depth-first search.
*/
void createLevelLinkedList(TreeNode root, ArrayList<LinkedList<TreeNode>> lists, int level) {
	if(root == null) return;
	LinkedList<TreeNode> list = null;
	if(list.size() == level) {
		list = new LinkedList<TreeNode>();
		lists.add(list);
	}
	else{
		list = lists.get(level);
	}
	list.add(root);
	createLevelLinkedList(root.left, lists, level + 1);
	createLevelLinkedList(root.right, lists, level +1);

}
ArrayList<LinkedList<TreeNode>> createLevelLinkedList(TreeNode root) {
	ArrayList<LinkedList<TreeNode>> lists = new ArrayList<LinkedList<TreeNode>>();
	createLevelLinkedList(root, lists, 0);
	return lists;
}
/*
alternatively, we can also implement amodification of breadth-first search. with this
implementaion, we want to iterate through the root first, then level 2, then level 3 and so on.
With each level i, we can simple look at all children of the nodes of level i - 1.
*/
ArrayList<LinkedList<TreeNode>> createLevelLinkedList(TreeNode root) {
	ArrayList<LinkedList<TreeNode>> result = new ArrayList<LinkedList<TreeNode>>();
	LinkedList<TreeNode> current = new LinkedList<TreeNode>();
	if(root != null) {
		current.add(root);
	}
	while(current.size() > 0) {
		result.add(current);
		LinkedList<TreeNode> parents = current; // add previous level
		current = new LinkedList<TreeNode>(); // go to next level
		for(TreeNode parent : parents) {
			if(parent.left != null){
				current.add(parent.left);
			}
			if(parent.right != null){
				current.add(parent.right);
			}
		}
	}
	return result;
}





